generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  token String

  // this key identifier instead of userId is taken for the conformity reasons with PrismaAdapters.
  identifier String   @unique @db.ObjectId
  user       User     @relation(fields: [identifier], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email       String  @unique
  phoneNumber Int?
  password    String
  username    String
  fullName    String
  name        String?
  image       String?

  emailVerifiedAt       DateTime?
  phoneNumberVerifiedAt DateTime?

  blockedAt DateTime?

  profile         Profile?
  confirmationOTP VerificationToken?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role EUserRole @default(USER)

  products  Product[]
  reviews   Review[]
  carts     CartItem[]
  orders    Order[]
  addresses Address[]
}

enum EUserRole {
  USER
  ADMIN
}

model Product {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  price           TPrice
  dimension       ProductDimension
  slug            String           @unique
  quantityInStock Int
  reviewsCount    Int              @default(0)
  tableProps      TTableProps[]
  medias          TMedia[]

  reviews      Review[]
  partOfCarts  CartItem[]
  partOfOrders OrderItem[]

  userId String         @db.ObjectId
  user   User           @relation(fields: [userId], references: [id])
  status EProductStatus @default(DRAFT)
  // orders Order[]
}

enum EProductStatus {
  DRAFT
  PUBLISHED
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  rating  Int
  comment String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

type TPrice {
  amount   Float
  currency ECurrencySymbol @default(INR)
}

enum ECurrencySymbol {
  INR
}

model CartItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  items         OrderItem[]
  totalAmount   Int
  itemsPrice    Int
  shippingPrice Int
  taxPrice      Int
  
  paymentMode EPaymentMode?
  paidAt   DateTime?
  paidJson Json?
  stripeSessionId String?

  addressId String?  @db.ObjectId
  address   Address? @relation(fields: [addressId], references: [id])
  
  outOfDelivery DateTime?
  delivered     DateTime?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

enum EPaymentMode {
  COD
  ONLINE
} 

model OrderItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  productsId String  @db.ObjectId
  product    Product @relation(fields: [productsId], references: [id])

  priceAtThatTime TPrice
  quantity        Int

  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type TTableProps {
  key   String
  value String
}

type TMedia {
  type      EMediaEnum
  url       String
  isDefault Boolean    @default(false)
  orderNo   Int
}

enum EMediaEnum {
  IMAGE
  VIDEO
  AUDIO
}

type ProductDimension {
  weight Float
  length Float
  width  Float
  height Float
}

model Profile {
  // userId String @unique @db.ObjectId

  // as the user authorised, profile entrt would be created immediately with id = user.id
  // no extra userId field would be used, as User and Profile would have 1:1 mapping
  user        User         @relation(fields: [id], references: [id])
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  gender      Gender_Enum?
  dateOfBirth DateTime?
  currentCTC  Int?
  
}

enum Gender_Enum {
  MALE
  FEMALE
}

type TDateRange {
  start DateTime
  end   DateTime?
}

type TInstitute {
  name String
  url  String?
}

model Address {
  isDefault Boolean @default(false)

  userName String
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  landmark String
  city        String
  state       String
  country     String
  phoneNumber String
  pincode     String
  longitude   String?
  latitude    String?

  orders Order[]

  User      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
}
